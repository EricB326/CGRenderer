#ifndef TEXTURE_H
#define TEXTURE_H

/* User defined includes
*/
#include "common.h"

namespace uciniti
{
	/* @brief Class Texture. Handles loading, binding, and using
		textures passed by the user via files. Store the handle
		of the texture as well as the, width, height, and bit depth.
	*/
	class Texture
	{
	public:
		/******************************************************/
		// Functions
		/* @brief Constructor zeros all values with no params.
		*/
		Texture();

		/* @brief Loads a texture via the passed filepath. Handles
			setting the texture parameters, generating mip maps, and
			generating the texture buffers.
		   @return True if the texture was successfully loaded.
		*/
		bool load_texture(const char* a_filepath);

		/* @brief Binds and makes active the texture at the passed
			index.
		*/
		bool bind_texture(int a_index);

		/* @brief Calls bind_texture, see Texture.h (this) lines 31->32.
		*/
		bool use_texture(int a_index) { return bind_texture(a_index); }

		/* @brief Getter for the texture handle ID.
		*/
		uint get_handle();

		/* @brief Getters for the textures width and height.
		*/
		inline int get_width() { return m_width; }
		inline int get_height() { return m_height; }

	private:
		/******************************************************/
		// Variables
		/* @brief Stores the handle generated by OpenGL for the
			texture.
		*/
		uint m_texture_handle;

		/* @brief Stores the width and height of the texture file
			loaded.
		*/
		int m_width, m_height;

		/* @brief Stores the number of colours that can be in each
			channel of the loaded texture file.
		*/
		int m_bit_depth;

		/* @brief Handles deleting the textures handle and also resetting
			the other variables.
		*/
		void clear_texture();
	};
}

#endif // !TEXTURE_H